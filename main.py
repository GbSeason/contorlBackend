# This is a sample Python script.

# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.
# ====================================================================================================================
# = 本项目集成YOLO，opencv，flask，websocket，串口通信等，主要功能是通过关节末端摄像头获取图像，通过yolo识别目标，计算位置，通过串口    =
# = 控制关节运动到达目标位置，执行操作。运行web服务，接收网页端请求可以同步监视实时画面，监控识别过程，识别纠正和关节控制。                =
# ====================================================================================================================
# ========视频采集使用USB双目摄像头，输出画面为左右画面拼接在一起的整幅画面，使用时需要分割开来左右画面。
# 主要过程：
# 1 启动机械臂扫描动作，水平和垂直旋转；
# 2 同时摄像机不断获取当前画面，yolo识别目标启动，
#   ===每次扫描动作完成后，暂停，等待yolo识别结果，有结果则进入到下一步，无结果则继续扫描===
#   扫描动作水平每次旋转30度左右，水平旋转20度左右
# 3 识别到目标后，摄像机暂停扫描动作，yolo再次持续至少2次识别都能识别到目标，置信度在0.8以上，以确认目标位置，然后yolo停止识别
# 4 保存当前左视图中识别到的目标区域数据到数组中[包含图像信息和坐标大小]，转为目标追踪模式
# 5 用左视图区域的目标信息匹配右视图，能够在右视图中匹配到目标，并且两者能够对应上(水平视图的top值应该基本相等 差值 < 15px)
#   使用[双目测距]看目标是否在操作范围内，否则检查下一个目标，如果这一组都没有，则返回第一步继续执行
# 6 确认水平试图目标匹配后，开始移动机械臂，头部扫描机械归零，直到目标在画面上居中，垂直居中，左画面目标右边距与右画面基本相等，步骤如下：
#     ________   ________
#    |     ~  | |  ~     |   目标处于摄像机正前方时，在左右画面中示意
#   这个时候头部的水平和垂直可能都有旋转角度，但是为了计算准确方便，需要保持头部摄像机保持正前方，也就是头部与臂关节方向一致
#   所以需要用机械臂基础关节来补偿，使用目标追踪器cv2.TrackerKCF算法
#   ==目标水平居中，头部旋转组件归零，同时base关节旋转补偿
#     base关节旋转多少，采用边移动，边计算目标是否居中，直到头部角度为0度，base关节调整，目标水平居中为止
#   ==头部也要垂直居中，也就是0度，与水平调整方法一样，头部逐渐回到0度，同时臂关节补偿，最终使目标垂直居中，并且头部角度归零
#
# 7 目标在画面居中后，开始[双目测距]，根据算法计算目标实际坐标
# 8 确认坐标后，机械臂移动到目标附近指定位置，开始作业
#                     需要安装以下包
#  ===================pip install opencv-contrib-python======================
#  主要步骤：
#          画面扫描，yolo识别，左右画面模板匹配，双目测距，【画面居中，模板追踪，主关节补偿】，实际坐标，运动到目标坐标
from dispatcher import Dispatcher
# import subprocess


def init(name):
    # start_nginx()
    Dispatcher().start()


# def start_nginx():
#     subprocess.Popen(["./nginx-1.19.7/nginx.exe"], cwd="./nginx-1.19.7/")
#     print("Nginx is running.")


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    init(__name__)
